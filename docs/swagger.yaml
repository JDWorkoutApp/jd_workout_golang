definitions:
  auth.ForgetPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.LoginWithGoogleAccessTokenForm:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  auth.ResetPassword:
    properties:
      confirmPassword:
        type: string
      newPassword:
        type: string
      password:
        type: string
    required:
    - confirmPassword
    - newPassword
    - password
    type: object
  auth.registerForm:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  equip.equipExpand:
    properties:
      equip:
        $ref: '#/definitions/models.Equip'
      lastRecords:
        items:
          $ref: '#/definitions/equip.recentRecord'
        type: array
      maxVolumeRecord:
        $ref: '#/definitions/equip.lastMaxWeightRecord'
      maxWeightRecord:
        $ref: '#/definitions/equip.maxWeightRecord'
    type: object
  equip.equipListResponse:
    properties:
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/equip.equipExpand'
        type: array
      perPage:
        type: integer
      total:
        type: integer
    type: object
  equip.lastMaxWeightRecord:
    properties:
      dayVolume:
        type: number
      id:
        type: integer
      maxWeight:
        type: number
      maxWeightReps:
        type: integer
    type: object
  equip.maxWeightRecord:
    properties:
      dayVolume:
        type: number
      id:
        type: integer
      reps:
        type: integer
      weight:
        type: number
    type: object
  equip.recentRecord:
    properties:
      ids:
        items:
          type: integer
        type: array
      note:
        items:
          type: string
        type: array
      reps:
        type: integer
      sets:
        type: integer
      volume:
        type: number
      weight:
        type: number
    type: object
  equip.updateFrom:
    properties:
      name:
        type: string
      note:
        type: string
    required:
    - name
    type: object
  equip.weightForm:
    properties:
      weights:
        items:
          type: number
        type: array
    required:
    - weights
    type: object
  models.Equip:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      note:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      weights:
        type: string
    type: object
  record.createBody:
    properties:
      equip_id:
        type: integer
      note:
        type: string
      reps:
        type: integer
      weight:
        type: number
    required:
    - equip_id
    - reps
    - weight
    type: object
  record.dateGroup:
    properties:
      date:
        type: string
      end:
        type: string
      equips:
        items:
          $ref: '#/definitions/record.equipGroup'
        type: array
      start:
        type: string
    type: object
  record.equipGroup:
    properties:
      id:
        type: integer
      name:
        type: string
      note:
        type: string
      records:
        items:
          $ref: '#/definitions/record.recordDetail'
        type: array
    type: object
  record.recordDetail:
    properties:
      ids:
        items:
          type: integer
        type: array
      note:
        items:
          type: string
        type: array
      reps:
        type: integer
      sets:
        type: integer
      weight:
        type: number
    type: object
  record.recordListResponse:
    properties:
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/record.dateGroup'
        type: array
      perPage:
        type: integer
      total:
        type: integer
    type: object
  record.updateBody:
    properties:
      equip_id:
        type: integer
      note:
        type: string
      reps:
        type: integer
      weight:
        type: number
    required:
    - equip_id
    - reps
    - weight
    type: object
info:
  contact: {}
paths:
  /app/version:
    get:
      consumes:
      - application/json
      description: Get app version
      produces:
      - application/json
      responses:
        "200":
          description: '{''latestVersion: 1.0.0'', ''requiredVersion'': ''1.0.0''}'
          schema:
            type: string
      summary: Get app version
      tags:
      - App
  /equip:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: equip list for personal user
      parameters:
      - in: query
        name: currentPage
        type: integer
      - in: query
        name: perPage
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/equip.equipListResponse'
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: equip list
      tags:
      - Equip
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: create equip for personal user
      parameters:
      - description: equip name
        in: formData
        name: name
        required: true
        type: string
      - description: note for equip
        in: formData
        name: note
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''create success'', ''id'' : ''1''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: create equip
      tags:
      - Equip
  /equip/{id}:
    delete:
      consumes:
      - application/json
      description: delete equip for personal user
      parameters:
      - description: equip id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''deleted success''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: delete equip
      tags:
      - Equip
    patch:
      consumes:
      - application/json
      description: update equip for personal user
      parameters:
      - description: equip id
        in: path
        name: id
        required: true
        type: integer
      - description: note for equip
        in: body
        name: weights
        schema:
          $ref: '#/definitions/equip.updateFrom'
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''create success''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: update equip
      tags:
      - Equip
  /equip/{id}/weight:
    put:
      consumes:
      - application/json
      description: update equip weight for personal user
      parameters:
      - description: equip id
        in: path
        name: id
        required: true
        type: integer
      - description: note for equip
        in: body
        name: weights
        schema:
          $ref: '#/definitions/equip.weightForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''create success''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: update equip weight
      tags:
      - Equip
  /forget-password:
    post:
      consumes:
      - application/json
      description: user forget password
      parameters:
      - description: forgetPassword
        in: body
        name: forgetPassword
        required: true
        schema:
          $ref: '#/definitions/auth.ForgetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "forget password success"}'
          schema:
            type: string
        "422":
          description: '{"message": "查無此 email"}'
          schema:
            type: string
      summary: forget password
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Logs in a user with the provided email and password, and generates
        a JWT token for the user
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''login success'', ''token'': ''JWT token'',
            ''reset'': ''0''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''帳號或密碼錯誤'', ''error'': ''error message''}'
          schema:
            type: string
      summary: Login user
      tags:
      - Auth
  /login/google/access-token:
    post:
      consumes:
      - application/json
      description: Logs in a user with the google oauth2 access token, and generates
        a JWT token for the user
      parameters:
      - description: LoginWithGoogleAccessTokenForm
        in: body
        name: LoginWithGoogleAccessTokenForm
        required: true
        schema:
          $ref: '#/definitions/auth.LoginWithGoogleAccessTokenForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''login success'', ''token'': ''JWT token''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      summary: Login user with google oauth2 access token
      tags:
      - Auth
  /record:
    post:
      consumes:
      - application/json
      description: create record
      parameters:
      - description: createBody
        in: body
        name: createBody
        required: true
        schema:
          $ref: '#/definitions/record.createBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''create success'', ''id'' : ''1''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: create record
      tags:
      - Record
  /record/{id}:
    delete:
      consumes:
      - application/json
      description: delete record
      parameters:
      - description: record id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''delete success''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: delete record
      tags:
      - Record
    put:
      consumes:
      - application/json
      description: update record
      parameters:
      - description: record id
        in: path
        name: id
        required: true
        type: string
      - description: updateBody
        in: body
        name: updateBody
        required: true
        schema:
          $ref: '#/definitions/record.updateBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''update success'', ''id'' : ''1''}'
          schema:
            type: string
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: update record
      tags:
      - Record
  /record/day-summary:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: record list for personal user
      parameters:
      - in: query
        name: currentPage
        type: integer
      - in: query
        name: perPage
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/record.recordListResponse'
        "403":
          description: '{''message'': ''jwt token error'', ''error'': ''error message''}'
          schema:
            type: string
        "422":
          description: '{''message'': ''缺少必要欄位'', ''error'': ''error message''}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: day summary list
      tags:
      - Record
  /register:
    post:
      consumes:
      - application/json
      description: user register
      parameters:
      - description: registerForm
        in: body
        name: registerForm
        required: true
        schema:
          $ref: '#/definitions/auth.registerForm'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "register success"}'
          schema:
            type: string
        "422":
          description: '{"message": "信箱尚未驗證"}'
          schema:
            type: string
        "500":
          description: '{"message": "register failed", "error": "server error"}'
          schema:
            type: string
      summary: register
      tags:
      - Auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: user reset password
      parameters:
      - description: resetPassword
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "密碼修改成功", "token": "jwt token"}'
          schema:
            type: string
        "422":
          description: '{"message": "密碼修改失敗", "error": "密碼不一致"}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: reset password
      tags:
      - Auth
securityDefinitions:
  Bearer:
    description: Type Bearer followed by a space and JWT token.
    in: header
    name: Authorization
    scopes:
      write: ' Grants write access'
    type: apiKey
swagger: "2.0"
