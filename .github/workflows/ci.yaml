name: CI

on:
  pull_request:
    branches:
      - dev
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint check
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
        env:
          GO111MODULE: off
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          args: --timeout=30m --issues-exit-code=0 --config='./.github/workflows/ci.yaml' --out-format=github-actions
      - name: make lint
        run: make lint
  push-testing-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: JDWorkoutApp/jd_workout_golang
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          dockerfile: ./docker/app/DockerfileCI
          tags: testing
      - name: Publish to Registry Mysql
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: JDWorkoutApp/jd_workout_golang_mysql
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          dockerfile: ./docker/mysql/DockerfileCI
          tags: testing
      - name: Publish to Registry Redis
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: JDWorkoutApp/jd_workout_golang_redis
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          dockerfile: ./docker/redis/DockerfileCI
          tags: testing
  test:
    needs: push-testing-image
    runs-on: ubuntu-latest
    steps:
      - name: Pull image and deploy, and test
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          passphrase: ${{ secrets.DEPLOY_PASSPHRASE }}
          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            export PROCESS_TYPE=cd && 
            cd /app/ci_test_jd_workout && 
            docker-compose pull && 
            docker-compose up -d && 
            docker image prune -f &&
            docker-compose exec -T app make test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /app/ci_test_jd_workout/coverage.out
          fail_ci_if_error: true
          verbose: true